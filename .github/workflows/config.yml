# run locally with https://github.com/nektos/act
# sudo rm -r /github/workspace && sudo cp -r ./ /github/workspace && act run --job test --bind --directory /github/workspace
name: ci

# Run this workflow every time a new commit pushed to your repository
on: 
  push:
    branches: main
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
env:
  DEPLOY_TARGET: subzerocloud

  # database connection parameters
  PRODUCTION_DB_MASTER_USER: ${{ secrets.PRODUCTION_DB_MASTER_USER }}
  PRODUCTION_DB_MASTER_PASSWORD: ${{ secrets.PRODUCTION_DB_MASTER_PASSWORD }}
  PRODUCTION_DB_HOST: ${{ secrets.PRODUCTION_DB_HOST }}
  PRODUCTION_DB_PORT: ${{ secrets.PRODUCTION_DB_PORT }}
  PRODUCTION_DB_NAME: ${{ secrets.PRODUCTION_DB_NAME }}
  PRODUCTION_DB_URI: "${{ secrets.PRODUCTION_DB_MASTER_USER }}:${{ secrets.PRODUCTION_DB_MASTER_PASSWORD }}@${{ secrets.PRODUCTION_DB_HOST }}:${{ secrets.PRODUCTION_DB_PORT }}/${{ secrets.PRODUCTION_DB_NAME }}"

  # static content upload settings
  UPLOAD_STATIC_FILES: false
  SFTP_HOST: sftp.app.subzero.cloud
  SFTP_PORT: 2323
  SFTP_USER: ${{ secrets.SFTP_USER }}
  SFTP_PASSWORD: ${{ secrets.SUBZERO_PASSWORD }}

  # subzero.cloud settings
  SUBZERO_API_ENDPOINT: https://app.subzero.cloud
  SUBZERO_EMAIL: ${{ secrets.SUBZERO_EMAIL }}
  SUBZERO_PASSWORD: ${{ secrets.SUBZERO_PASSWORD }}
  SUBZERO_APPLICATION_ID:  ${{ secrets.SUBZERO_APPLICATION_ID }}

jobs:

  test:
    runs-on: ubuntu-latest
    steps:

      - name: checkout repository
        uses: actions/checkout@v2

      - name: bring up docker-compose
        run: |
          docker-compose down
          docker-compose up -d

      - name: run tests
        run: |
          yarn install
          yarn test

      - name: shutdown test stack
        run: docker-compose down

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    steps:

      - name: checkout repository
        uses: actions/checkout@v2

      - name: check correct configuration
        run: |
          CHECKS_FAILED=false

          # check all needed variables are set
          for ENV_VAR in PRODUCTION_DB_MASTER_USER PRODUCTION_DB_MASTER_PASSWORD PRODUCTION_DB_HOST PRODUCTION_DB_PORT PRODUCTION_DB_NAME
          do
            if [ -z ${!ENV_VAR} ]; then echo "${ENV_VAR} is unset"; CHECKS_FAILED=true; fi
          done

          if [ "$UPLOAD_STATIC_FILES" = true ]; then
            for ENV_VAR in SFTP_USER SFTP_HOST SFTP_PORT SFTP_USER SFTP_PASSWORD
            do
              if [ -z ${!ENV_VAR} ]; then echo "${ENV_VAR} is unset"; CHECKS_FAILED=true; fi
            done
          fi

          if [ "$DEPLOY_TARGET" = "subzerocloud" ]; then
            for ENV_VAR in SUBZERO_EMAIL SUBZERO_PASSWORD SUBZERO_APPLICATION_ID
            do
              if [ -z ${!ENV_VAR} ]; then echo "${ENV_VAR} is unset"; CHECKS_FAILED=true; fi
            done
          fi

          # check migrations folder present
          if [ ! -f ./db/migrations/sqitch.plan ]; then
              echo "Migrations folder missing, please run 'subzero migrations init --with-roles'"
              CHECKS_FAILED=true
          fi
          
          if [ "$CHECKS_FAILED" = true ]; then exit 1; fi
          
          echo "checking database connection"
          psql -c '\q' "postgres://$PRODUCTION_DB_URI"

      - name: install dependencies
        run: |
          # apt-get update -y
          apt-get install -y sshpass
          # apt-get install -y sqitch
          docker pull sqitch/sqitch
          curl -s -L https://git.io/JJKCn -o /usr/local/bin/sqitch && chmod +x /usr/local/bin/sqitch

      
      - name: deploy database migrations
        working-directory: ./db/migrations
        run: |
          sqitch deploy "db:pg://$PRODUCTION_DB_URI"

      - name: upload static content
        env.SUBZERO_UPLOAD_STATIC_FILES }}
        working-directory: ./html
        run : |
          sshpass -p "$SFTP_PASSWORD" scp -o StrictHostKeyChecking=no -P $SFTP_PORT -r ./ $SFTP_USER@$SFTP_HOST:/

      - name: trigger subzero.cloud schema cache refresh
        if: ${{ env.DEPLOY_TARGET == 'subzerocloud' }}
        run: |
          curl -s -X POST \
               --cookie-jar session.txt \
               -H 'Content-Type: application/json' \
               -d "{\"email\":\"$SUBZERO_EMAIL\",\"password\":\"$SUBZERO_PASSWORD\"}" \
               "$SUBZERO_API_ENDPOINT/rest/rpc/login?select=id" > /dev/null

          curl -s -X GET \
               --cookie session.txt \
               "${SUBZERO_API_ENDPOINT}/rest/rpc/reload_db_schema?id=eq.${SUBZERO_APPLICATION_ID}" > /dev/null
          
          # alternatively, you can also update some application settings, which will also trigger a schema cache refresh
          # curl -s -X PATCH \
          #       --cookie session.txt \
          #      -H 'Content-Type: application/json' \
          #      -d "{\"db_host\":\"$PRODUCTION_DB_HOST\"}" \
          #      "${SUBZERO_API_ENDPOINT}/rest/applications?select=id&id=eq.${SUBZERO_APPLICATION_ID}"
